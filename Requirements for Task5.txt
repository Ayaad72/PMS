1). Make a User Registration Page with Email Address Input ,Password Input & Age Input after both inputs make a Register Button 
(When user Fills all the inputs and clicks on the Register button it will Take the user to the Login Page and stores the Users Data in 
Local Storage Using Javascript)
2). Now make a Login Page which just contain two input fields one for Email Address and one for Password and after these inputs
make Login and Sign Up buttons.
3). Add Bootstrap Alerts for the Login Successful and Registration Alert replace all the Browser prebuild alerts with the bootstrap
Alerts
4).Make a Very Simple Product management screen Features for the Product management screen are following:
  =>First of all there should be a by default ADD PRODUCTS BUTTON when user clicks on that add products button a table
    should be shown Table should contain 3 rows and 10 columns first row is for product name,(Products should be laptops
    like Macbook, Hp Elite book etc)second row is for product model like 2020,2021 etc Note: THESE FIRST TWO ROWS SHOULD
    HAVE THE FUNCTIONALITY TO SEARCH THE PRODUCTS STORED IN THE LOCAL STORAGE OF THE BROWSER and by default there should be
    5 prducts on the table...
  =>Add Some best stylings to make this product managemant system more visually appealing
5). Now i want user to not access PMS file without registering or ligging in the user there's a vulnerability in my 
website where any type user is accessing the PMS page if he is not reguistered or logged in by doing  this http://127.0.0.1:5500/Login.html
to http://127.0.0.1:5500/pms.html please avoid this here's the full code for LOGIN.js
// Add an event listener to the "PMS" button
document.getElementById('pms').addEventListener('click', function(event) {
    var userData = JSON.parse(localStorage.getItem("userData")) || [];
    var loggedInUser = userData.find(function(user) {
        return user.email === email; // Assuming you have stored the email of the logged-in user
    });

    if (!loggedInUser) {
        // User is not registered, prevent the default action of the link/button
        event.preventDefault();
        // Show a Bootstrap alert message
        var alertsContainer = document.getElementById("alertsContainer");
    
        var alertElement = document.createElement("div");
        alertElement.className = "alert alert-warning alert-dismissible fade show";
        alertElement.role = "alert";
        alertElement.innerHTML = "Please register first!";
    
        var closeButton = document.createElement("button");
        closeButton.type = "button";
        closeButton.className = "btn-close";
        closeButton.setAttribute("data-bs-dismiss", "alert");
        closeButton.setAttribute("aria-label", "Close");
    
        alertElement.appendChild(closeButton);
        alertsContainer.appendChild(alertElement);
    
        // Automatically dismiss the alert after 3 seconds (3000 milliseconds)
        setTimeout(function() {
            alertElement.remove();
        }, 3000);
    }
    
    
});

document.getElementById("loginForm").addEventListener("submit", function(event) {
    event.preventDefault();

    var email = document.getElementById("email").value;
    var password = document.getElementById("password").value;

    var userData = JSON.parse(localStorage.getItem("userData")) || [];

    var loggedInUser = userData.find(function(user) {
        return user.email === email && user.password === password;
    });

    if (loggedInUser) {
        // User is logged in successfully
        var alertElement = document.createElement("div");
        alertElement.className = "alert alert-success alert-dismissible fade show";
        alertElement.role = "alert";
        alertElement.innerHTML = "Login successful! Redirecting to product management page...";

        var closeButton = document.createElement("button");
        closeButton.type = "button";
        closeButton.className = "btn-close";
        closeButton.setAttribute("data-bs-dismiss", "alert");
        closeButton.setAttribute("aria-label", "Close");

        alertElement.appendChild(closeButton);

        var alertsContainer = document.getElementById("alertsContainer");
        alertsContainer.innerHTML = ""; 
        alertsContainer.appendChild(alertElement);

        setTimeout(function() {
            window.location.href = "/PMS.html"; 
        }, 2000);
    } else {
        // User is not logged in
        var alertElement = document.createElement("div");
        alertElement.className = "alert alert-danger alert-dismissible fade show";
        alertElement.role = "alert";
        alertElement.innerHTML = "Incorrect email or password. Please provide correct credentials";

        var closeButton = document.createElement("button");
        closeButton.type = "button";
        closeButton.className = "btn-close";
        closeButton.setAttribute("data-bs-dismiss", "alert");
        closeButton.setAttribute("aria-label", "Close");

        alertElement.appendChild(closeButton);

        var alertsContainer = document.getElementById("alertsContainer");
        alertsContainer.innerHTML = "";
        alertsContainer.appendChild(alertElement);
    }
});

and here the code for the PMS.js
// Load product list from local storage on page load
window.onload = function() {
    var savedProductList = localStorage.getItem('productList');
    if(savedProductList) {
      var productList = JSON.parse(savedProductList);
      renderProductList(productList);
    }
  };
  
  function addProduct() {
    var productName = document.getElementById("productName").value;
    var productModel = document.getElementById("productModel").value;
    if (productName && productModel) {
      var product = {
        name: productName,
        model: productModel
      };
      
      // Retrieve existing product list from local storage
      var productList = localStorage.getItem('productList');
      productList = productList ? JSON.parse(productList) : [];
      
      // Add new product to the array
      productList.push(product);
      
      // Save updated product list to local storage
      localStorage.setItem('productList', JSON.stringify(productList));
      
      // Render updated product list
      renderProductList(productList);
      
      // Clear input fields
      document.getElementById("productName").value = "";
      document.getElementById("productModel").value = "";
    } else {
      alert("Please enter product details.");
    }
  }
  
  function renderProductList(productList) {
    var productListContainer = document.getElementById("productList");
    productListContainer.innerHTML = "";
    productList.forEach(function(product, index) {
      var newRow = productListContainer.insertRow();
      var cell1 = newRow.insertCell(0);
      var cell2 = newRow.insertCell(1);
      var cell3 = newRow.insertCell(2);
      cell1.textContent = product.name;
      cell2.textContent = product.model;
      cell3.innerHTML = '<button class="edit" onclick="editProduct(' + index + ')">Edit</button><button class="remove" onclick="removeProduct(' + index + ')">Remove</button>';
    });
  }
  
  function editProduct(index) {
    // Retrieve product list from local storage
    var productList = JSON.parse(localStorage.getItem('productList'));
    
    // Retrieve product details at the specified index
    var product = productList[index];
    
    // Set input fields with product details
    document.getElementById("productName").value = product.name;
    document.getElementById("productModel").value = product.model;
    
    // Remove product from array
    productList.splice(index, 1);
    
    // Save updated product list to local storage
    localStorage.setItem('productList', JSON.stringify(productList));
    
    // Render updated product list
    renderProductList(productList);
  }
  
  function removeProduct(index) {
    // Retrieve product list from local storage
    var productList = JSON.parse(localStorage.getItem('productList'));
    
    // Remove product at the specified index
    productList.splice(index, 1);
    
    // Save updated product list to local storage
    localStorage.setItem('productList', JSON.stringify(productList));
    
    // Render updated product list
    renderProductList(productList);
  }
  
Only let the user acces the PMS when the user exists in the loacal storage otherwise not